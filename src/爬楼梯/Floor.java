package 爬楼梯;

/**
 * @author 骑着蜗牛ひ追导弹'
 * @date 2022-09-14 22:48
 * <p>
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * <p>
 * 示例 1：
 * 输入：n = 2
 * 输出：2
 * 解释：有两种方法可以爬到楼顶。
 * 1. 1 阶 + 1 阶
 * 2. 2 阶
 * 示例 2：
 * 输入：n = 3
 * 输出：3
 * 解释：有三种方法可以爬到楼顶。
 * 1. 1 阶 + 1 阶 + 1 阶
 * 2. 1 阶 + 2 阶
 * 3. 2 阶 + 1 阶
 * <p>
 * 注意：1 <= n <= 45
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode.cn/problems/climbing-stairs
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Floor {

    public int climbStairs(int n) {
        // 一阶有一种，二阶有两种
        if (n <= 2) {
            return n;
        }
        // 定义两种可走台阶数
        int i1 = 1;
        int i2 = 2;
        // 从三层台阶开始
        /*
          1         一阶

          2         二阶
          1+1

          2+1       三阶     2 => 1      一阶
          1+2               1 => 2      二阶
          1+1+1                  1+1

          2+2       四阶     2 => 2      二阶
          2+1+1                  1+1
          1+2+1             1 => 2+1    三阶
          1+1+2                  1+2
          1+1+1+1                1+1+1

          可以看出每高一阶就是剩余阶数的楼梯走法：
             f1 先走1阶，那就是剩余 n-1 阶的走法
             f2 先走2阶，那就是剩余 n-2 阶的走法
          最终 F = f1+f2  => f(n) = f(n-1)+f(n-2)
          其实就是斐波那契数列：1、1、2、3、5、8、13、21、34....
             从第三项开始，后一项都是前两项的和
         */
        for (int i = 3; i <= n; i++) {
            int temp = i1 + i2;
            i1 = i2;
            i2 = temp;
        }
        return i2;
    }

}
